from __future__ import print_function

from .filter_handler import filter_handler
import logging
import pandas as pd
import os

module_path = os.path.abspath(os.path.dirname(__file__))


class s3_container_to_vulnerability_filter_handler(filter_handler):
    def __init__(self):
        self.logger = logging.getLogger(__name__)

    def filter(self, data, datasets=[]):
        # enumerate all image ids from the vulnerability list
        dfs = []
        for k in datasets['dataset1']['data']['image_id'].keys():
            image_id = datasets['dataset1']['data']['image_id'][k]
            sev1 = datasets['dataset1']['data']['num_vulnerabilities_severity_1'][k]
            sev2 = datasets['dataset1']['data']['num_vulnerabilities_severity_2'][k]
            sev3 = datasets['dataset1']['data']['num_vulnerabilities_severity_3'][k]
            sev4 = datasets['dataset1']['data']['num_vulnerabilities_severity_4'][k]
            sev5 = datasets['dataset1']['data']['num_vulnerabilities_severity_5'][k]

            container_info = data.loc[data['IMAGE_ID'] == image_id]

            container_info['num_vulnerabilities_severity_1'] = sev1
            container_info['num_vulnerabilities_severity_2'] = sev2
            container_info['num_vulnerabilities_severity_3'] = sev3
            container_info['num_vulnerabilities_severity_4'] = sev4
            container_info['num_vulnerabilities_severity_5'] = sev5

            dfs.append(container_info)

        df = pd.concat(dfs, ignore_index=True)
        self.logger.info(df)
        return df
        # self.logger.info(data)
        # self.logger.info(data.head(1)['IMAGE_ID'])
        # self.logger.info(data.head(1)['CONTAINER_NAME'])
        # self.logger.info(data.head(1)['POD_NAME'])
        # self.logger.info(data.head(1)['PROPS_CONTAINER']['PROPS_LABEL']['io.kubernetes.pod.namespace'])
        # self.logger.info(data.head(1)['TAGS']['lw_KubernetesCluster'])
